// Generated by Apple Swift version 4.0.2 (swiftlang-900.0.69.2 clang-900.0.38)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import UIKit;
@import Foundation;
@import WebKit;
#endif

#import <BuzzSDK/BuzzSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("BuzzSDK")
enum MFVertical : NSInteger;
@class UIImage;
@class UIColor;

/// Provides the configurable parameters values for the app based on its vertical identifier.
SWIFT_CLASS("_TtC7BuzzSDK16AppConfiguration")
@interface AppConfiguration : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum MFVertical vertical;)
+ (enum MFVertical)vertical SWIFT_WARN_UNUSED_RESULT;
/// Convenience class method to reset the Target Key name and associated Target on the App Config from the default value derived from PLIST
+ (void)resetWithTargetKeyName:(NSString * _Nonnull)targetKeyName;
/// When <code>true</code> all videos will be considered as playbable before assessment and will be played on its original card position
+ (BOOL)debugAssessAllVideosAsPlayable SWIFT_WARN_UNUSED_RESULT;
/// When <code>true</code>, the app will block any Ad content from presentation.
+ (BOOL)debugBlockAdCards SWIFT_WARN_UNUSED_RESULT;
/// Provides the Group Name for App content sharing with extensions.
+ (NSString * _Nonnull)appGroupName SWIFT_WARN_UNUSED_RESULT;
/// Provides the Bundle Id hardcoded which is a security requirement for features like in app purchases receipt validation.
+ (NSString * _Nonnull)hardcodedBundleId SWIFT_WARN_UNUSED_RESULT;
/// Provides the Name of the localization file name in the bundle to be used for vertical dependent localizations
+ (NSString * _Nonnull)verticalLocalizationFilename SWIFT_WARN_UNUSED_RESULT;
/// Provides the timeZone identifier for date calculations where a default app timezone wants to be used irrespective of user settings.
+ (NSString * _Nullable)defaultAppTimeZoneIdentifier SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nullable)regionCodesForTargetDetermination SWIFT_WARN_UNUSED_RESULT;
/// Porvide teh target key name for a given region Code on the current vertical
+ (NSString * _Nonnull)targetKeyNameForRegionCode:(NSString * _Nonnull)regionCode SWIFT_WARN_UNUSED_RESULT;
/// The host url for the API
+ (NSString * _Nonnull)serverBaseURL SWIFT_WARN_UNUSED_RESULT;
/// The API Token for the Push Pilot API
+ (NSString * _Nonnull)serverAuthToken SWIFT_WARN_UNUSED_RESULT;
/// If <code>true</code> the app will ignore any style string provided from API on the card elements and will use the default card style for app instead.
+ (BOOL)ignoreCardStyleFromAPIResponse SWIFT_WARN_UNUSED_RESULT;
/// Defines if the app is to show and onboarding controller on first launch
+ (BOOL)appRequiresOnboarding SWIFT_WARN_UNUSED_RESULT;
/// When <code>false</code>, the app will not show to the user any info cards if present in the stack
+ (BOOL)showInfoCards SWIFT_WARN_UNUSED_RESULT;
/// When <code>false</code> the app will not present the “shake to go back” info card after user installs the app. If <code>true</code> the card will be added to the stack until the user shakes the device to go back for the first time.
+ (BOOL)canShowShakeToGoBackCard SWIFT_WARN_UNUSED_RESULT;
/// The nib/xib file name for the generic card action view for the app
+ (NSString * _Nonnull)nibNameForGenericCardActionView SWIFT_WARN_UNUSED_RESULT;
/// The nib/xib file name for the notification view (overlay top view for status messages) for the app
+ (NSString * _Nonnull)nibNameForNotificationView SWIFT_WARN_UNUSED_RESULT;
/// The image name for the shake info card
+ (NSString * _Nonnull)shakeInfoCardImageName SWIFT_WARN_UNUSED_RESULT;
/// Defines the name of the asset to be used as Logo Image
+ (NSString * _Nonnull)logoButtonImageName SWIFT_WARN_UNUSED_RESULT;
/// Defines the name of the asset to be used as Logo Image When weekend mode is active
+ (NSString * _Nonnull)logoButtonImageNameInWeekendMode SWIFT_WARN_UNUSED_RESULT;
/// The name of the asset to be used in the back button
+ (NSString * _Nonnull)imageNameForBackButton SWIFT_WARN_UNUSED_RESULT;
/// Defines the name of the asset to be used as Sound ON button when used on the top bar
+ (NSString * _Nonnull)soundONButtonImageName SWIFT_WARN_UNUSED_RESULT;
/// Defines the name of the asset to be used as Sound OFF button when used on the top bar
+ (NSString * _Nonnull)soundOFFButtonImageName SWIFT_WARN_UNUSED_RESULT;
/// The image to be used in the sound button when in ON state when used as card overlay
+ (UIImage * _Nullable)soundOnButtonImage SWIFT_WARN_UNUSED_RESULT;
/// The image to be used in the sound button when in OFF state when used as card overlay
+ (UIImage * _Nullable)soundOffButtonImage SWIFT_WARN_UNUSED_RESULT;
/// The image to be used in the minimize button when used as card overlay
+ (UIImage * _Nullable)minimizeButtonImage SWIFT_WARN_UNUSED_RESULT;
/// The image to be used in the fullscreen button when used as card overlay
+ (UIImage * _Nullable)fullScreenButtonImage SWIFT_WARN_UNUSED_RESULT;
/// The image to be used in the play button on the card or pip overlay by default
+ (UIImage * _Nullable)playButtonStackImage SWIFT_WARN_UNUSED_RESULT;
/// The image to be used in in the sound button of the PIP if presented when Sound is Off
+ (UIImage * _Nullable)soundPIPOffButtonImage SWIFT_WARN_UNUSED_RESULT;
/// The image to be used in in the sound button of the PIP if presented when Sound is On
+ (UIImage * _Nullable)soundPIPOnButtonImage SWIFT_WARN_UNUSED_RESULT;
/// The image to be used in in the full screen button of the PIP video view
+ (UIImage * _Nullable)fullScreenPIPButtonImage SWIFT_WARN_UNUSED_RESULT;
/// Defines the name of the asset to be used for the stack reload button image. If no asset is provided a default text button will be shown
+ (NSString * _Nullable)stackViewReloadImageName SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)watermarkImage SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the app should allow videos to be played in full screen mode.
+ (BOOL)shouldAllowFullScreenVideoPlayback SWIFT_WARN_UNUSED_RESULT;
/// When <code>true</code>, the video control buttons (minimize, fullscreen, sound) will be presented as overlay elements over the video container view. If <code>false</code> these control buttons will be displayed in the <code>CardActionButtonsView</code> on top of the card
+ (BOOL)showVideoControlButtonsOverlayOverVideoContainer SWIFT_WARN_UNUSED_RESULT;
/// The tickness of the PIP video view border in points
+ (CGFloat)pipVideoViewBorderPoints SWIFT_WARN_UNUSED_RESULT;
/// The default PIP video width fraction to screen size to be used when not explicitly provided on creation.
+ (CGFloat)pipVideoViewDefaultWidthToScreenWidthFraction SWIFT_WARN_UNUSED_RESULT;
/// The maximum width a PIP can take. Expressed in fraction to screen view width.
+ (CGFloat)pipVideoViewMaximumWidthToScreenWidthFraction SWIFT_WARN_UNUSED_RESULT;
/// The minimum width a PIP can take if explicitly specified. Expressed in fraction to screen view width.
+ (CGFloat)pipVideoViewMinimumWidthToScreenWidthFraction SWIFT_WARN_UNUSED_RESULT;
/// The maximum height a PIP can take. Expressed in fraction to screen view height.
+ (CGFloat)pipVideoViewMaxHeightToScreenHeightFraction SWIFT_WARN_UNUSED_RESULT;
/// Specifies if the PIP Controllers should display pip video views centered or on regular right side.
+ (BOOL)pipVideoViewControllerDisplayTopPipCentered SWIFT_WARN_UNUSED_RESULT;
/// The ammount of points margin between the bottom of the card stack and the PIP video view when calculating the pip video view ‘defaultHeigh’. Be aware that this height might not be respected if the resulting video width is too small, in such case pip video view will be upsized up to a max height.
+ (CGFloat)desiredVerticalSpaceBetweenCardStackBottomAndPIPVideoTop SWIFT_WARN_UNUSED_RESULT;
/// Defines the number of times the user must dismiss a PIP Video View before the app stops showing the tooltip on how to dismiss a PIP Video View.
+ (NSInteger)pipVideoViewRequiredDismissalsToHidePanDownTooltipForever SWIFT_WARN_UNUSED_RESULT;
/// Defines if the app should allow presentation of PIP tooltips to the user.
+ (BOOL)shouldAllowTooltipInPIP SWIFT_WARN_UNUSED_RESULT;
/// boolean indicating whether the Sound Control button should be presented or not
+ (BOOL)includePIPAudioControlButton SWIFT_WARN_UNUSED_RESULT;
/// boolean indicating whether the Full Screen Control button should be presented or not
+ (BOOL)includePIPFullScreenControlButton SWIFT_WARN_UNUSED_RESULT;
/// The number of times the user must share a Meme card before the “How to share” tooltip for Meme cards is not displayed anymore below the Meme card.
+ (NSInteger)numberOfMemeShareRequiredBeforeHidingIntroMessage SWIFT_WARN_UNUSED_RESULT;
/// Defines if the Meme video created for sharing should include a final info frame. If not, the video ends where the gif ends.
+ (BOOL)videoMemeCardExportIncludeFinalInfoFrame SWIFT_WARN_UNUSED_RESULT;
/// Defines if the info frame when included in the sharing video for Meme Cards, should include a watermark version of the logo.
+ (BOOL)showShareWatermark SWIFT_WARN_UNUSED_RESULT;
/// The text to use for the Watermark on the info frame of the meme export for share video
+ (NSString * _Nonnull)watermarkLabelText SWIFT_WARN_UNUSED_RESULT;
/// The Java Script string representation of code to be injected to every web page loaded by the applications web views.
+ (NSString * _Nullable)webViewInjectJSString SWIFT_WARN_UNUSED_RESULT;
/// Defines the message to be added to the url string when sharing a card. The message is added before the url string.
+ (NSString * _Nonnull)shareAppStoreURLMessage SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether the color inverted share buttons should be used instead of regular ones.
+ (BOOL)useInvertedShareButtons SWIFT_WARN_UNUSED_RESULT;
/// Controls the automatic display of share buttons on videos after the provided ammount of seconds of video playback has elapsed. Valid for native video cards. If <code>automaticDisplayOfShareButtonsAfterSeconds</code> has a valid setting value, then this setting is ignored.
+ (CGFloat)showVideoShareButtonsAfterSeconds SWIFT_WARN_UNUSED_RESULT;
/// Controls the automatic display of share buttons after the card has been set to top and the provided ammount of seconds have elapsed. Valid for article, video cards and html cards. If a value of <code>-1</code> (or negative) is provided, then the share buttons will not be displayed automatically but only when user opens the article and comes back to the card Stack. If a valid value is provided (i.e. 0 or greater) then <code>showVideoShareButtonsAfterSeconds</code> setting has no effect as video cards will behave in accordance with <code>automaticDisplayOfShareButtonsAfterSeconds</code> instead.
+ (CGFloat)automaticDisplayOfShareButtonsAfterSeconds SWIFT_WARN_UNUSED_RESULT;
/// Indicates the name of the asset for a video intro controller that should be presented at launch before displaying the main controller. If this method returns <code>nil</code> or the asset is not available in the bundle, the Intro Controller will not be displayed.
+ (NSString * _Nullable)videoAssetNameForIntroController SWIFT_WARN_UNUSED_RESULT;
/// Indicates the name of the asset for a video intro controller that should be presented at launch before displaying the main controller when weekend mode is active and is a weekend day. If this method returns <code>nil</code> or the asset is not available in the bundle, the Intro Controller will attempt to use <code>videoAssetNameForIntroController</code> instead.
+ (NSString * _Nullable)videoAssetNameForIntroControllerInWeekendMode SWIFT_WARN_UNUSED_RESULT;
/// Provides the color to apply to the BG of the Intro controller when presented.
+ (UIColor * _Nonnull)backgroundColorForIntroController SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the app supports subscriptions via inApp Purchases and app should therefore validate receipts and present purchase UI as necessary.
+ (BOOL)supportSubscriptions SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the app was previously a Paid app before addopting subscriptions. If that is the case the app will make sure users that already paid for the app are not asked to subscribe.
+ (BOOL)wasBeforeAPaidApp SWIFT_WARN_UNUSED_RESULT;
/// Provides the Property list (plist) name for the inApp Purchase products supported by the App when subscriptions are enabled.
+ (NSString * _Nonnull)productsListPlistName SWIFT_WARN_UNUSED_RESULT;
/// The ammount of periods to divide payment ammount to get a smaller period unit for basic subscription
+ (double)dividerForSubscriptionSubUnitPriceCalculationBasic SWIFT_WARN_UNUSED_RESULT;
/// The ammount of periods to divide payment ammount to get a smaller period unit for premium subscription
+ (double)dividerForSubscriptionSubUnitPriceCalculationPremium SWIFT_WARN_UNUSED_RESULT;
/// The url string to link the user when a <code>privacy policy</code> action is requested.
+ (NSString * _Nonnull)urlStringForPrivacyPolicy SWIFT_WARN_UNUSED_RESULT;
/// The url string to link the user when a <code>terms of use</code> action is requested. (Normally this links to the privacy policy)
+ (NSString * _Nonnull)urlStringForTermsOfUse SWIFT_WARN_UNUSED_RESULT;
/// The value to be set to the <code>Referer</code> header on web view requests. When <code>nil</code> no referal will be included.
+ (NSString * _Nullable)trackableURLRefererHeaderValue SWIFT_WARN_UNUSED_RESULT;
/// The app token from Ajust configuration
+ (NSString * _Nullable)adjustToken SWIFT_WARN_UNUSED_RESULT;
/// Adjust Token for Event Ad Click
+ (NSString * _Nullable)adjustEventAdClickEventToken SWIFT_WARN_UNUSED_RESULT;
/// Adjust Token for Event Ad Impression
+ (NSString * _Nullable)adjustAdImpressionEventToken SWIFT_WARN_UNUSED_RESULT;
/// Adjust Token for Event App Launch
+ (NSString * _Nullable)adjustAppLaunchEventToken SWIFT_WARN_UNUSED_RESULT;
/// Adjust Token for Event Onboarding Complete allowing push
+ (NSString * _Nullable)adjustOnboardingCompleteAllowPushEventToken SWIFT_WARN_UNUSED_RESULT;
/// Adjust Token for Event Onboarding Complete
+ (NSString * _Nullable)adjustOnboardingCompleteEventToken SWIFT_WARN_UNUSED_RESULT;
/// Adjust Token for Event Subscription performed when not basic or premium
+ (NSString * _Nullable)adjustSubscriptionEventToken SWIFT_WARN_UNUSED_RESULT;
/// Adjust Token for Event Subscription UI shown for Basic sub.
+ (NSString * _Nullable)adjustSubscriptionUIGroupBasicEventToken SWIFT_WARN_UNUSED_RESULT;
/// Adjust Token for Event Subscription UI shown for Premium sub.
+ (NSString * _Nullable)adjustSubscriptionUIGroupPremiumEventToken SWIFT_WARN_UNUSED_RESULT;
/// Adjust Token for Event User Subscribed to Basic Subscritpion
+ (NSString * _Nullable)adjustSubscriptionGroupBasicEventToken SWIFT_WARN_UNUSED_RESULT;
/// Adjust Token for Event User Subscribed to Premium Subscritpion
+ (NSString * _Nullable)adjustSubscriptionGroupPremiumEventToken SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Defines the grouping of verticals
typedef SWIFT_ENUM(NSInteger, MFVertical) {
  MFVerticalBuzz = 0,
  MFVerticalBuzzSDK = 1,
  MFVerticalBroNews = 2,
  MFVerticalRap1d = 3,
  MFVerticalArchAndDesign = 4,
  MFVerticalMakerApp = 5,
  MFVerticalPulse = 6,
};

@class LayoutCoordinatesObjC;
@class UIFont;

/// Provides the configurable sytle parameters values for the app based on its vertical identifier.
SWIFT_CLASS("_TtC7BuzzSDK8AppStyle")
@interface AppStyle : NSObject
/// The style of the status bar to be used on the Main View Controller and in other controllers of the app that has the same color scheme of the Main View Controller.
+ (UIStatusBarStyle)statusBarStyleForMainViewController SWIFT_WARN_UNUSED_RESULT;
/// Provide an array with colors and locations to draw a cross gradient. location 0 is top of screen, 0.5 is center and 1. is bottom. Must implement as well <code>locationsForGradientOnBackgroundView</code> for gradient to work
+ (NSArray<UIColor *> * _Nullable)colorsForGradientOnBackgroundView SWIFT_WARN_UNUSED_RESULT;
/// If the app does not provide a background image, provide an array with colors and locations to draw a cross gradient. location 0 is top of screen, 0.5 is center and 1. is bottom. Must implement as well <code>colorsForGradientOnBackgroundView</code> for gradient to work
+ (NSArray<NSNumber *> * _Nullable)locationsForGradientOnBackgroundView SWIFT_WARN_UNUSED_RESULT;
/// When no background image and no gradient background information are provided, the background will be colored using the value returned by this method.
+ (UIColor * _Nonnull)mainViewBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// The color for the main View controller activity indicator view. If <code>nil</code> is returned, the system default coloring will be preserved.
+ (UIColor * _Nullable)colorForMainViewActivityIndicatorView SWIFT_WARN_UNUSED_RESULT;
/// Defines if kickers are allowed to be displayed in cards when applicable
+ (BOOL)allowKickerDisplay SWIFT_WARN_UNUSED_RESULT;
/// The color of the outter shadow to be applied to all cards in the stack.
+ (UIColor * _Nonnull)shadowColorForCards SWIFT_WARN_UNUSED_RESULT;
/// The radius of the outter shadow to be applied to all cards in the stack.
+ (CGFloat)shadowRadiusForCards SWIFT_WARN_UNUSED_RESULT;
/// The offset of the outter shadow to be applied to all cards in the stack.
+ (CGSize)shadowOffsetForCards SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)videoMemeCardTextsFontName SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)videoMemeCardTextsBaseFontSize SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)videoMemeCardTextsColor SWIFT_WARN_UNUSED_RESULT;
/// The ratio of the height of the text area to the image area on the Meme card
+ (CGFloat)videoMemeCardTextAreaHeighFractionFromCardAreaHeight SWIFT_WARN_UNUSED_RESULT;
/// The ammount of extra padding in points to add to the text area on the top of the text.
+ (CGFloat)videoMemeCardTopTextExtraPadding SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)videoMemeCardExportProgressLabelFontName SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)videoMemeCardExportProgressLabelFontSize SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)videoMemeCardExportBorderTicknessPoints SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)videoMemeCardExportBorderColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)videoMemeCardExportFinalInfoFrameTextColor SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)videoMemeCardExportFinalInfoFrameFontSize SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)videoMemeCardExportFinalInfoFrameBGColor SWIFT_WARN_UNUSED_RESULT;
/// The font name to be used for the Watermark on the info frame of the meme export for share video
+ (NSString * _Nonnull)watermarkTextFontName SWIFT_WARN_UNUSED_RESULT;
/// The font size in points to be used for the Watermark on the info frame of the meme export for share video
+ (CGFloat)watermarkTextFontSize SWIFT_WARN_UNUSED_RESULT;
/// The font color to be used for the Watermark on the info frame of the meme export for share video
+ (UIColor * _Nonnull)watermarkColor SWIFT_WARN_UNUSED_RESULT;
/// The opacity for the  Watermark on the info frame of the meme export for share video
+ (CGFloat)watermarkOpacity SWIFT_WARN_UNUSED_RESULT;
/// The position flag for the Watermark on the info frame of the meme export for share video. if <code>true</code> watermark is place on top of the text, if <code>false</code> to the left of it.
+ (BOOL)watermarkImageOnTopOfText SWIFT_WARN_UNUSED_RESULT;
/// The margin from the action buttons to the edges of the card actions view
+ (CGFloat)additionalCardActionViewButtonsMargin SWIFT_WARN_UNUSED_RESULT;
/// The font name to be used on the main label of the card actions view
+ (NSString * _Nonnull)additionalCardActionViewLabelFontName SWIFT_WARN_UNUSED_RESULT;
/// The font size in points to be usd on the main lable of the card actions view
+ (CGFloat)additionalCardActionViewLabelFontSize SWIFT_WARN_UNUSED_RESULT;
/// The font color to be used on the main lable of the card actions view
+ (UIColor * _Nonnull)additionalCardActionViewLabelFontColor SWIFT_WARN_UNUSED_RESULT;
/// The font name to be usd on the action buttons of the card actions view
+ (NSString * _Nonnull)additionalCardActionViewButtonsFontName SWIFT_WARN_UNUSED_RESULT;
/// The font size in points to be usd on the action buttons of the card actions view
+ (CGFloat)additionalCardActionViewButtonsFontSize SWIFT_WARN_UNUSED_RESULT;
/// The font color to be used on the action buttons of the card actions view
+ (UIColor * _Nonnull)additionalCardActionViewButtonsFontColor SWIFT_WARN_UNUSED_RESULT;
/// The color to be used on the action buttons background of the card actions view
+ (UIColor * _Nonnull)additionalCardActionViewButtonsBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// The color to be used on the action buttons borders of the card actions view
+ (UIColor * _Nonnull)additionalCardActionViewButtonsBorderColor SWIFT_WARN_UNUSED_RESULT;
/// The border width in points to be used on the action buttons of the card actions view
+ (CGFloat)additionalCardActionViewButtonsBorderWidth SWIFT_WARN_UNUSED_RESULT;
/// The corner radius in points to be used on the action buttons of the card actions view
+ (CGFloat)additionalCardActionViewButtonsCornerRadius SWIFT_WARN_UNUSED_RESULT;
/// Convenience accessor of <code>pipToolTipLabelPadding</code> for Objective C.
+ (LayoutCoordinatesObjC * _Nonnull)pipToolTipLabelPadding SWIFT_WARN_UNUSED_RESULT;
/// The font name to be used on the textual pip tooltips
+ (NSString * _Nonnull)textualPIPToolTipFontName SWIFT_WARN_UNUSED_RESULT;
/// The font size in points to be used on the textual pip tooltips
+ (CGFloat)textualPIPToolTipFontSize SWIFT_WARN_UNUSED_RESULT;
/// The font color to be used on the textual pip tooltips
+ (UIColor * _Nonnull)textualPIPToolTipFontColor SWIFT_WARN_UNUSED_RESULT;
/// The color to be used for the background on the textual pip tooltips
+ (UIColor * _Nonnull)textualPIPToolTiplBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// The color to use on the progress section of the stack progress bar.
+ (UIColor * _Nonnull)stackProgressBarProgressTintColor SWIFT_WARN_UNUSED_RESULT;
/// The color to use on the track(bg) section of the stack progress bar.
+ (UIColor * _Nonnull)stackProgressBarTrackTintColor SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)fontNameForCounterInNavigationView SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)textColorForCounterInNavigationView SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)drawThinLineOverProgressBar SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)fontNameForReloadButton SWIFT_WARN_UNUSED_RESULT;
/// The size in points of the font for the reload button in the end of stack
+ (CGFloat)fontSizeForReloadButton SWIFT_WARN_UNUSED_RESULT;
/// Defines if the toolbar in the Web View should be placed on the top of the screen. if <code>false</code> it will be placed on the bottom of the screen.
+ (BOOL)webviewToolbarOnTop SWIFT_WARN_UNUSED_RESULT;
/// The tint to apply to the buttons on the web view bar.
+ (UIColor * _Nullable)tintColorForWebViewBottomBarItems SWIFT_WARN_UNUSED_RESULT;
/// Defines if a secondary close button (additional to the one on the bar) should be displayed when the Web View is presented.
+ (BOOL)presentSecondaryCloseButtonOnWebView SWIFT_WARN_UNUSED_RESULT;
+ (UIFont * _Nullable)raffleActionContainerFont SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)raffleActionContainerFontColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)raffleActionContainerBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)raffleCFABackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)raffleCFABorderColor SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)raffleCFACornerRadius SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)raffleCFABorderWidth SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)fontNameForSDKBringStackBackCounter SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)fontSizeForSDKBringStackBackCounter SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)fontColorForSDKBringStackBackCounter SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)backgroundColorForNormalStateForSDKBringStackBackCounter SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)backgroundColorForHighlightedStateForSDKBringStackBackCounter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Responsible for providing the necessary methods for networking interaction in BUZZ SDK
SWIFT_CLASS("_TtC7BuzzSDK17BUZZSDKNetworking")
@interface BUZZSDKNetworking : NSObject
/// The share instance accessor. <code>setup</code> must be called before trying to access this property. Otherwise the shared instace will be instantiated with an empty authentication token.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BUZZSDKNetworking * _Nonnull shared;)
+ (BUZZSDKNetworking * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Will  initialize the shared instance with a given apiKey. This method must be called before using accessing the <code>shared</code> instance for proper configuration.
+ (void)setupWithAPIKey:(NSString * _Nonnull)apiKey;
/// Will retrieve the device info Dictionary from the backend.
- (void)getDeviceInfoForSlug:(NSString * _Nonnull)slug completion:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Will register a device with given device Info if <code>slug == nil</code>. Otherwise will update device info into backend. When succesfull, callback will include the <code>slug</code> from backend.
- (void)registerOrUpdateDeviceForSlug:(NSString * _Nullable)slug deviceInfo:(NSDictionary<NSString *, id> * _Nonnull)deviceInfo completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Will retrieve the config dictionary and the cards array from backend. Completion block signature is (config : Payload?, cards : [Payload]?, error : Error?)
- (void)getConfigurationForGroup:(NSString * _Nullable)group completion:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completion;
/// Post the device logs to the backend. Completion block will indicate success of request. Completion block signature is (success : Bool, error : Error?)
- (void)postDeviceLogs:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)logs forSlug:(NSString * _Nonnull)slug completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7BuzzSDK13BuzzSDKDevice")
@interface BuzzSDKDevice : NSObject
/// The device slug for the device/app
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable slug;)
+ (NSString * _Nullable)slug SWIFT_WARN_UNUSED_RESULT;
/// Will update and or register the device data as necessary. <code>completion</code> is allways called on main thread.
+ (void)updateWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BuzzSDKStyleFormat : NSInteger;

/// A convenience class to provide access to style configuration values for the BuzzSDK
SWIFT_CLASS("_TtC7BuzzSDK12BuzzSDKStyle")
@interface BuzzSDKStyle : NSObject
+ (UIFont * _Nonnull)fontForTitleInFormat:(enum BuzzSDKStyleFormat)format SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)fontColorForTitle SWIFT_WARN_UNUSED_RESULT;
+ (UIFont * _Nonnull)fontForKickerInFormat:(enum BuzzSDKStyleFormat)format SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)fontColorForKicker SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)colorForTextBackground SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BuzzSDKStyleFormat) {
  BuzzSDKStyleFormatFullScreen = 0,
  BuzzSDKStyleFormatPip = 1,
};

/// User Video Interactions. Mainly focused on interaction indicating user intent.
/// BuzzSDKVideoInteractionFullScreen: The video was sent to fullscreen by user interaction
/// BuzzSDKVideoInteractionSwipedToPlay: The video was swiped from the PIP playlist to start playback.
/// BuzzSDKVideoInteractionPlay: The video was first played or resumed by the user by tapping on the Play button.
/// BuzzSDKVideoInteractionSoundOn: The video was unmutted by user interaction.
typedef SWIFT_ENUM(NSInteger, BuzzSDKVideoInteraction) {
  BuzzSDKVideoInteractionFullScreen = 0,
  BuzzSDKVideoInteractionSwipedToPlay = 1,
  BuzzSDKVideoInteractionPlay = 2,
  BuzzSDKVideoInteractionSoundOn = 3,
};


SWIFT_CLASS("_TtC7BuzzSDK30BuzzSDKVideoInteractionManager")
@interface BuzzSDKVideoInteractionManager : NSObject
- (void)addWithInteraction:(enum BuzzSDKVideoInteraction)interaction toVideoId:(NSString * _Nonnull)videoId;
- (void)cleanInteractionsForVideoId:(NSString * _Nonnull)videoId;
- (void)cleanAll;
- (NSDictionary<NSNumber *, NSNumber *> * _Nonnull)interactionsForVideoId:(NSString * _Nonnull)videoId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ContentFillStyle : NSInteger;
enum TitleVerticalPosition : NSInteger;
enum KickerPosition : NSInteger;
enum KickerBorderType : NSInteger;
enum CornerPosition : NSInteger;

/// Provides definitions of styles
SWIFT_CLASS("_TtC7BuzzSDK9CardStyle")
@interface CardStyle : NSObject
/// A <code>CardStyle</code> instance configured to the default card style for the app
+ (CardStyle * _Nonnull)defaultCardStyleForApp SWIFT_WARN_UNUSED_RESULT;
/// A <code>CardStyle</code> instance for a given <code>styleString</code>. Takes care of initializing the necessary subclasses when needed and available.
+ (CardStyle * _Nonnull)cardStyleForStyleString:(NSString * _Nullable)styleString SWIFT_WARN_UNUSED_RESULT;
/// Defines the background color to be applied to the cards
- (UIColor * _Nonnull)cardBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// The desired card aspect ration as height/width
- (CGFloat)cardAspectRatio SWIFT_WARN_UNUSED_RESULT;
/// The ammount of points to leave between the border of the main View Controllers edges and the card horizontally both to the left and to the right
- (CGFloat)horizontalMarginForCardRect SWIFT_WARN_UNUSED_RESULT;
/// The minimum ammount of points to leave between the border of the main View Controllers edges and the card vertically both on the top and on the bottom. The card aspect ration will be mantained but the <code>horizontalMarginForCardRect</code> will be increassed as necessart so that this minimum requirement is met when necessary.
- (CGFloat)minVerticalMarginForCardRect SWIFT_WARN_UNUSED_RESULT;
/// Defines if the cards should get the standard rotation on stack.
- (BOOL)shouldApplyRotationToCard SWIFT_WARN_UNUSED_RESULT;
/// The Fill Style to be applied to the content area of the card
- (enum ContentFillStyle)contentFillStyle SWIFT_WARN_UNUSED_RESULT;
/// The ammount of points to leave as empty space around the content of the card. symetric on all sides.
- (CGFloat)cardBorderSpacing SWIFT_WARN_UNUSED_RESULT;
/// The vertical position of the Title in the Card layout
- (enum TitleVerticalPosition)titleVerticalPosition SWIFT_WARN_UNUSED_RESULT;
/// The horizontal alingment to apply to the Title Text in the card
- (NSTextAlignment)titleTextAlingment SWIFT_WARN_UNUSED_RESULT;
/// The factor to multiply the line height of the title by to give the right aspect over its background
- (CGFloat)lineHeightMultiplierForTitle SWIFT_WARN_UNUSED_RESULT;
- (LayoutCoordinatesObjC * _Nonnull)titleMargins SWIFT_WARN_UNUSED_RESULT;
- (LayoutCoordinatesObjC * _Nonnull)titlePaddings SWIFT_WARN_UNUSED_RESULT;
- (LayoutCoordinatesObjC * _Nonnull)titleMarginsCompensationsIfNoKickerPresent SWIFT_WARN_UNUSED_RESULT;
/// The slope to be applied to the Slope cut design between text and main content (image/video). If the slope is Zero then there is no effect.
- (CGFloat)slopeForDiagonalCutFitEffectFromTitleToMainContent SWIFT_WARN_UNUSED_RESULT;
/// The maximum height of the title area in relation to the card height. This is to prevent cards with very long titles to take most of the card area leaving very little wide images. If the area for text reaches the max, the font of the title will be resized to fit the required bounds. If the aspect ratio of the card has change in comparison to the requested one (in small devices) this value will be recalculated to ensure the same image area resulting aspect ratio.
- (CGFloat)maxTitleAreaHeighRatioToCardMainContentHeight SWIFT_WARN_UNUSED_RESULT;
/// The name of the font to be used for the Title text of the card
- (NSString * _Nonnull)fontNameForTitle SWIFT_WARN_UNUSED_RESULT;
/// The size in points of the font to be used for the Title text of the card
- (CGFloat)fontSizeForTitle SWIFT_WARN_UNUSED_RESULT;
/// The color of the font to be used for the Title text of the card
- (UIColor * _Nonnull)colorForTitleText SWIFT_WARN_UNUSED_RESULT;
/// The color of the background of the Title text of the card
- (UIColor * _Nonnull)colorForTitleBackground SWIFT_WARN_UNUSED_RESULT;
/// Defines if a shadow should be applied to the title text of the card
- (BOOL)applyShadowToTitle SWIFT_WARN_UNUSED_RESULT;
/// Defines if the title text shdould be allways be forced to upper case
- (BOOL)forceTitleUppercase SWIFT_WARN_UNUSED_RESULT;
/// Defines if a gradient background should be added the card title to improve the readability
- (BOOL)addGradientBackgroundForTitleReadability SWIFT_WARN_UNUSED_RESULT;
/// Defines if the title gradient background when included should be Non Linear
- (BOOL)gradientBackgroundForTitleReadabilityNonLinearOverTitle SWIFT_WARN_UNUSED_RESULT;
/// Defines the ammount of points on top of the title that the gradient background should extend so that the Non linear effect display is smooth.
- (CGFloat)gradientBackgroundForTitleReadabilityFadeYExtensionForSmoothFade SWIFT_WARN_UNUSED_RESULT;
/// Defines the color for the semitransparent edge for the gradient background for the title.
- (UIColor * _Nonnull)gradientBackgroundForTitleReadabilityColorForEndPoint SWIFT_WARN_UNUSED_RESULT;
/// Defines the color for the for the gradient background for the title at the transition point when using a non linear gradient.
- (UIColor * _Nonnull)gradientBackgroundForTitleReadabilityColorForNonLinearTransitionPoint SWIFT_WARN_UNUSED_RESULT;
/// The minimum lenght of the kicker text (number of characters) to allow the kicker to be displayed. This allows to hide kickers that are too short (i.e. 1 character).
- (NSInteger)minimumLenghtForKickerText SWIFT_WARN_UNUSED_RESULT;
/// The vertical position of the Title in the Card layout
- (enum KickerPosition)kickerPosition SWIFT_WARN_UNUSED_RESULT;
- (LayoutCoordinatesObjC * _Nonnull)kickerMargins SWIFT_WARN_UNUSED_RESULT;
- (LayoutCoordinatesObjC * _Nonnull)kickerPaddings SWIFT_WARN_UNUSED_RESULT;
/// The Type of border to add to the kicker in the card
- (enum KickerBorderType)kickerBorderType SWIFT_WARN_UNUSED_RESULT;
/// The Max height the kicker should have in the card
- (CGFloat)kickerMaxHeight SWIFT_WARN_UNUSED_RESULT;
/// Defines if the kicker background should cover the full width of the card or if it should be fitted to the size of the text in the kicker.
- (BOOL)kickerBackgroudMustCoverFullWidthOfCard SWIFT_WARN_UNUSED_RESULT;
/// The name of the font to be used for the Kicker text of the card
- (NSString * _Nonnull)fontNameForKicker SWIFT_WARN_UNUSED_RESULT;
/// The size in points of the font to be used for the Kicker text of the card
- (CGFloat)fontSizeForKicker SWIFT_WARN_UNUSED_RESULT;
/// The color of the font to be used for the Kicker text of the card
- (UIColor * _Nonnull)colorForKickerText SWIFT_WARN_UNUSED_RESULT;
/// The color of the background of the Kicker text of the card
- (UIColor * _Nonnull)colorForKickerBackground SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether the kicker should be hidden and presentd before and after transtions to full screen or PIP video modes from card mode.
- (BOOL)hideKickerWhenTransitioningVideo SWIFT_WARN_UNUSED_RESULT;
/// The size in points of the side of the square overlay control buttons. (Sound, FullScreen, Minimize, etc…)
- (CGFloat)articleCardVideoControlButtonBaseSidePoints SWIFT_WARN_UNUSED_RESULT;
- (LayoutCoordinatesObjC * _Nonnull)overlayPrimaryTopLeftButtonMargins SWIFT_WARN_UNUSED_RESULT;
- (LayoutCoordinatesObjC * _Nonnull)overlaySecondaryTopLeftButtonMargins SWIFT_WARN_UNUSED_RESULT;
- (LayoutCoordinatesObjC * _Nonnull)overlayPrimaryTopRightButtonMargins SWIFT_WARN_UNUSED_RESULT;
- (LayoutCoordinatesObjC * _Nonnull)overlayPrimaryBottomLeftButtonMargins SWIFT_WARN_UNUSED_RESULT;
/// Boolean defining whether to consider the kicker position along with titlel position when calculating the position of the full screen button.
- (BOOL)considerKickerPositionForFullScreenButtonPositioning SWIFT_WARN_UNUSED_RESULT;
/// The tint color for the overlay control buttons. If nil is returned, then no tinting on default white color buttons is applied.
- (UIColor * _Nullable)tintColorForControlButtons SWIFT_WARN_UNUSED_RESULT;
/// The color for the video cover up view. i.e. the view that is put on top of the video view while the content is loading before the user request playback. This view is faded away when the user request playback given a smooth transitions from placeholder image view to cover up view to video content view.
- (UIColor * _Nonnull)colorForVideoCoverUpView SWIFT_WARN_UNUSED_RESULT;
/// The color for the progress tracking section of the video progress bar in the card and PIP video view
- (UIColor * _Nonnull)videoProgressBarProgressTintColor SWIFT_WARN_UNUSED_RESULT;
/// The color for the background of the video progress bar in the card and PIP video view
- (UIColor * _Nonnull)videoProgressBarTrackTintColor SWIFT_WARN_UNUSED_RESULT;
/// Defines the corner where the Tag Image should be positioned. This information along with <code>cardTagImageMarginToCard</code> defines the actual positon of the Tag Image
- (enum CornerPosition)cardTagImageCornerPosition SWIFT_WARN_UNUSED_RESULT;
- (LayoutCoordinatesObjC * _Nonnull)cardTagImageMarginToCard SWIFT_WARN_UNUSED_RESULT;
/// The name of the image asset to be used as Tag in the card. If <code>nil</code> is returned or the asset can not be found in the bundle, no Tag image will be displayed.
- (NSString * _Nullable)cardTagImageName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// The way the content should fill the card.
typedef SWIFT_ENUM(NSInteger, ContentFillStyle) {
  ContentFillStyleResizesToTitle = 0,
  ContentFillStyleFillsCard = 1,
};

/// The vertical position of the Title in the Card
typedef SWIFT_ENUM(NSInteger, TitleVerticalPosition) {
  TitleVerticalPositionTop = 0,
  TitleVerticalPositionBottom = 1,
};

/// The position of the Kicker in the Card
typedef SWIFT_ENUM(NSInteger, KickerPosition) {
  KickerPositionTopLeft = 0,
  KickerPositionTopRight = 1,
  KickerPositionTopCentered = 2,
  KickerPositionBottomLeft = 3,
  KickerPositionBottomRight = 4,
  KickerPositionBottomCentered = 5,
};

/// The border type to apply to the kicker
typedef SWIFT_ENUM(NSInteger, KickerBorderType) {
  KickerBorderTypeNone = 0,
  KickerBorderTypeInclinedRight = 1,
};

/// Defines the posible 4 corner positions a regular element can take for layout
typedef SWIFT_ENUM(NSInteger, CornerPosition) {
  CornerPositionTopLeft = 0,
  CornerPositionTopRight = 1,
  CornerPositionBottomLeft = 2,
  CornerPositionBottomRight = 3,
};

typedef SWIFT_ENUM(NSInteger, DateFormatterStyle) {
  DateFormatterStyleDateTime = 0,
  DateFormatterStyleDateTimeTS = 1,
  DateFormatterStyleDateTimeMsTS = 2,
  DateFormatterStyleDateTimeMsTSAlt = 3,
  DateFormatterStyleDate = 4,
  DateFormatterStyleDateUI = 5,
};


/// A Convenience class to wrap the LayoutCoordinates struct for usage in Obj-C
SWIFT_CLASS("_TtC7BuzzSDK21LayoutCoordinatesObjC")
@interface LayoutCoordinatesObjC : NSObject
@property (nonatomic) CGFloat top;
@property (nonatomic) CGFloat bottom;
@property (nonatomic) CGFloat left;
@property (nonatomic) CGFloat right;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Utility providing foreground and background download capabilities for media (images and videos) with temporary file cache storage. Make sure call <code>setup</code> before using the shared instance if your app belongs to an App Group, otherwise the standard user defaults and user chaches directories will be used for persistance. It is also important to connect the App Delegate handler methods below to the appropiate events from the AppDelegate for proper background task management and cache maintenance.
SWIFT_CLASS("_TtC7BuzzSDK17MFDownloadManager")
@interface MFDownloadManager : NSObject
/// Will configure the shared class to be used with the given <code>appGroup</code> which determines the UserDefaults instance for persistance. If <code>appGroup</code> is nil, standard UserDefaults will be used.
+ (void)setupForAppGroup:(NSString * _Nullable)appGroup;
/// The shared instance. If setup had not been called when shared is invoqued, the shared instance will be created with a <code>nil</code> app group identifier and will use standard User Defaults for persistance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MFDownloadManager * _Nonnull shared;)
+ (MFDownloadManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The app delegate handler for download tasks. This method should be forwarded from the App Delegated when called as to properly handle the events for Background session if active.
- (void)handleEventsForBackgroundURLSessionWithIdentifier:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// This method should be invoqued when the application delegate gets informed that app will terminate. It will make sure to persist any active BG Downloads that are not too old (to clean up) so that they can be handled properly if they finish while app is terminated and relaunched id BG. It will also make sure the user defaults are synch before saving to prevent loosing data.
- (void)handleApplicationWillTerminate;
/// Will Delete all expired content records and files from storage. We delete the expired files automatically every time an instance is initialized which is only possible when the share instance is created. i.e. when the holding app is launched from terminated state and the app sets up or uses the shared instance for the first time. You can also call this maintenance method on other times in your app lifecycle.
- (void)deleteExpiredFiles;
/// Cancells the download for the id if active.
- (void)cancelDownloadWithId:(NSString * _Nonnull)id;
/// Cancells all active download tasks
- (void)cancellAll;
/// Will get the local image file URL for the media previously downloaded for a given <code>id</code> if available
- (NSURL * _Nullable)imageFileURLForId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Will get the local video file URL for the media previously downloaded for a given <code>id</code> if available
- (NSURL * _Nullable)videoFileURLForId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Will get a UIImage for the media previously downloaded for a given <code>id</code> if available. This method will block the thread it is executed on until the image is loaded.
- (UIImage * _Nullable)imageForId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Will get a UIImage for the media previously downloaded at a given <code>url</code> if available. This method will block the thread it is executed on until the image is loaded.
- (UIImage * _Nullable)imageAtURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Will get the Data for the media previously downloaded at a given <code>url</code> if available. This method will block the thread it is executed on until the data is loaded.
- (NSData * _Nullable)mediaDataAtURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (void)expireMediaForId:(NSString * _Nonnull)id;
/// Specific image downloder/getter convenience method. <code>completion</code> will allways be called on the Main Thread.
- (void)getImageAtURL:(NSURL * _Nonnull)url inBackground:(BOOL)inBackground forId:(NSString * _Nonnull)id expiringAt:(NSDate * _Nullable)expiration completion:(void (^ _Nonnull)(BOOL, UIImage * _Nullable))completion;
/// Will trigger an image download for caching.
- (void)cacheImageAtURL:(NSURL * _Nonnull)url inBackground:(BOOL)inBackground forId:(NSString * _Nonnull)id expiringAt:(NSDate * _Nullable)expiration;
/// Specific local image url downloder/getter convenience method. <code>completion</code> will allways be called on the Main Thread.
- (void)getLocalURLForImageAtURL:(NSURL * _Nonnull)url inBackground:(BOOL)inBackground forId:(NSString * _Nonnull)id expiringAt:(NSDate * _Nullable)expiration completion:(void (^ _Nonnull)(BOOL, NSURL * _Nullable))completion;
/// Specific local video url downloder/getter convenience method. <code>completion</code> will allways be called on the Main Thread.
- (void)getLocalURLForVideoAtURL:(NSURL * _Nonnull)url inBackground:(BOOL)inBackground forId:(NSString * _Nonnull)id expiringAt:(NSDate * _Nullable)expiration completion:(void (^ _Nonnull)(BOOL, NSURL * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSURLSession;

@interface MFDownloadManager (SWIFT_EXTENSION(BuzzSDK)) <NSURLSessionDelegate>
/// If an application has received an -application:handleEventsForBackgroundURLSession:completionHandler: message, the session delegate will receive this message to indicate that all messages previously enqueued for this session have been delivered. At this time it is safe to invoke the previously stored completion handler, or to begin any internal updates that will result in invoking the completion handler.
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
@end

@class NSURLSessionTask;

@interface MFDownloadManager (SWIFT_EXTENSION(BuzzSDK)) <NSURLSessionTaskDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end

@class NSURLSessionDownloadTask;

@interface MFDownloadManager (SWIFT_EXTENSION(BuzzSDK)) <NSURLSessionDownloadDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
@end

@class GDMediaPlayer;
@class UIView;
@protocol MFFullScreenVideoPlayerControllerDelegate;
@class NSCoder;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

/// A controller for full screen video playback. Supporting transferable videos.
SWIFT_CLASS("_TtC7BuzzSDK33MFFullScreenVideoPlayerController")
@interface MFFullScreenVideoPlayerController : UIViewController
/// The instance of the <code>GDMediaPlayer</code> to be played on full screen.
@property (nonatomic, readonly, strong) GDMediaPlayer * _Nullable mediaPlayer;
@property (nonatomic, strong) UIImage * _Nullable placeholderImage;
/// You can add any content that must be visible when controls are visible here. Any added view to this container will be hidden along with controls except when an exchange is happening. This view lays on top of the view hierarchy and is responsible to handle the tag gesture for controlling the display of controls and additional views.
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified additionalViewsContainerView;
/// Indicates if the last interactive transition was cancelled.
@property (nonatomic, readonly) BOOL transitionWasCancelled;
- (nullable instancetype)initWithDelegate:(id <MFFullScreenVideoPlayerControllerDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Flag indicting if the transition is interactive
@property (nonatomic) BOOL interactiveTransition;
/// Tells the controller to update an interaction transition to progress. (0 to 1). Will have no effect if an interactive transition is not in progress.
- (void)updateWithTransitionProgress:(CGFloat)progress;
/// Tell the controller to cancel an ongoing interactive transition. Will have no effect if an interactive transition is not in progress.
- (void)cancelTransition;
/// Tell the controller to finish an ongoing interactive transition. Will have no effect if an interactive transition is not in progress.
- (void)finishTransition;
/// Flag indicating if the controller is currently transitioning in or out.
@property (nonatomic, readonly) BOOL isTransitioning;
/// Will prepared the controller for presentation of a given <code>GDMediaPlayer</code>, by setting the mediaPlayer variable and setting the aspect ratio of the video container view.
- (void)prepareForPlayer:(GDMediaPlayer * _Nonnull)player;
/// Will add the <code>mediaPlayer</code> layer to the view hierarchy. This method is called automatically on custom presentations. In other cases it must be explicitly called on presentation completion.
- (void)addPlayerLayerToViewHierarchy;
/// Will start or request playback of media player if already set.
- (void)playback;
/// Will pause playback of media player if already set.
- (void)pause;
/// Indicates if the controller can currently support a player exchange.
- (BOOL)canExchangeWith:(GDMediaPlayer * _Nonnull)player SWIFT_WARN_UNUSED_RESULT;
/// Will trigger the exchange of a given <code>player</code> for the current set player with the given <code>controller</code>. The process will be animated if <code>animated == true</code>. If no player was previously set, this method does nothing.
- (void)exchangeWithPlayer:(GDMediaPlayer * _Nonnull)player from:(UIViewController * _Nonnull)controller animated:(BOOL)animated interactive:(BOOL)interactive;
/// Will release the associated video player and remove it from view. After calling release the controller should be dismissed otherwise will stay with an empty video.
- (void)release:(void (^ _Nonnull)(void))completion;
/// Will shake the current video container view. Useful for indicating some restricted user interaction.
- (void)shake;
/// Will ensure controls are shown temporarely. Calling this method will show the controls and schedule its hiding automatically. During transitions calling this method has no effect, or if the controls are already shown with no schedule timer for hiding.
- (void)ensureDisplayOfControls;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol UIViewControllerAnimatedTransitioning;
@protocol UIViewControllerInteractiveTransitioning;

@interface MFFullScreenVideoPlayerController (SWIFT_EXTENSION(BuzzSDK)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UIViewControllerContextTransitioning;

@interface MFFullScreenVideoPlayerController (SWIFT_EXTENSION(BuzzSDK)) <UIViewControllerAnimatedTransitioning>
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
@end


@interface MFFullScreenVideoPlayerController (SWIFT_EXTENSION(BuzzSDK)) <GDMediaPlayerUIDelegateProtocol>
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer playbackHasBeenRequestedCanStartPlayback:(BOOL)canPlayNow;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer startedPlaybackForContentType:(GDMediaPlayerContentType)mediaPlayerContentType;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer videoCanRestartPlaybackForContentType:(GDMediaPlayerContentType)mediaPlayerContentType wasStalled:(BOOL)wasStalled;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer videoHasStalledForContentType:(GDMediaPlayerContentType)mediaPlayerContentType;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer isReadyForDisplayForContentType:(GDMediaPlayerContentType)mediaPlayerContentType;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer playbackWasPausedForContentType:(GDMediaPlayerContentType)mediaPlayerContentType;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer videoHasReachedEndForContentType:(GDMediaPlayerContentType)mediaPlayerContentType willLoop:(BOOL)willLoop;
@end

@class UIPanGestureRecognizer;

SWIFT_PROTOCOL("_TtP7BuzzSDK41MFFullScreenVideoPlayerControllerDelegate_")
@protocol MFFullScreenVideoPlayerControllerDelegate
/// Notifies the delegate a player transition will start from a controller to another controller using the provided container <code>transitionView</code> view for the given <code>mediaPlayer</code> and <code>videoContainerView</code> to hold the player’s layers. Note that for internal transition (in case of a player exchange not involving a controller dismissal or presentation) the <code>transitionView</code> will be a subview of either <code>fromVC</code> or <code>toVC</code> view or will be nil if the transition is not animated. You can check for this condition to avoid unnecessary view hierarchy modifications. <code>mediaPlayer</code> will be nil only on dismissal transitions after resources has been released.
- (void)fullScreenVideoPlayerController:(MFFullScreenVideoPlayerController * _Nonnull)controller willStartTransitionFrom:(UIViewController * _Nonnull)fromVC to:(UIViewController * _Nonnull)toVC in:(UIView * _Nullable)transitionView for:(GDMediaPlayer * _Nullable)mediaPlayer with:(UIView * _Nullable)videoContainerView;
/// Asks the delegate for the frame for the video container view when animating in or out from Full Screen. The returning frame must be on the requested <code>destinationController</code> coordinate space. if <code>destinationController == controller</code> the player’s view is being transfered to full screen so the returned frame should match the frame before transition, otherwise is being transfered out of full screen and so the frame should match the desired frame after transition.
- (CGRect)fullScreenVideoPlayerController:(MFFullScreenVideoPlayerController * _Nonnull)controller videoContainerViewFrameForTransitionTo:(UIViewController * _Nonnull)destinationController SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate a player transition has ended from a controller to another controller using the provided container <code>transitionView</code> view for the given <code>mediaPlayer</code> with the provided <code>placeholderImage</code> (<code>placeholderImage</code> will always be <code>nil</code> when transitioning to full screen controller). Note that for internal transition (in case of a player exchange not involving a controller dismissal or presentation) the <code>transitionView</code> will be a subview of either <code>fromVC</code> or <code>toVC</code> view or will be nil if the transition is not animated. You can check for this condition to avoid unnecessary view hierarchy modifications. <code>mediaPlayer</code> will be nil only on dismissal transitions after resources has been released.
- (void)fullScreenVideoPlayerController:(MFFullScreenVideoPlayerController * _Nonnull)controller didEndTransitionTo:(UIViewController * _Nonnull)toVC from:(UIViewController * _Nonnull)fromVC in:(UIView * _Nullable)transitionView for:(GDMediaPlayer * _Nullable)mediaPlayer with:(UIImage * _Nullable)placeholderImage;
/// Notifies the delegate a player transition has been cancelled from a controller to another controller using the provided container <code>transitionView</code> view for the given <code>mediaPlayer</code>. Note that for internal transition (in case of a player exchange not involving a controller dismissal or presentation) the <code>transitionView</code> will be a subview of either <code>fromVC</code> or <code>toVC</code> view or will be nil if the transition is not animated. You can check for this condition to avoid unnecessary view hierarchy modifications.
- (void)fullScreenVideoPlayerController:(MFFullScreenVideoPlayerController * _Nonnull)controller didCancelTransitionTo:(UIViewController * _Nonnull)toVC from:(UIViewController * _Nonnull)fromVC in:(UIView * _Nullable)transitionView for:(GDMediaPlayer * _Nonnull)mediaPlayer;
/// Instructs the delegate to handle a Pan gesture used for interactive dismissal.
- (void)fullScreenVideoPlayerController:(MFFullScreenVideoPlayerController * _Nonnull)controller handlePanGestureForInteractiveDismissal:(UIPanGestureRecognizer * _Nonnull)recognizer;
/// Notifies the delegate that the user requested dismissal, <code>interactive</code> indicates the request is done via an interactive gesture.
- (void)fullScreenVideoPlayerControllerUserRequestDismissal:(MFFullScreenVideoPlayerController * _Nonnull)controller interactive:(BOOL)interactive;
@optional
/// Notifies the delegate that the user has tapped the more info button.
- (void)fullScreenVideoPlayerControllerUserRequestsMoreInfo:(MFFullScreenVideoPlayerController * _Nonnull)controller;
@required
/// Asks the delegate if the video should playback automatically after it has been inserted into the controllers view hierarchy.
- (BOOL)fullScreenVideoPlayerController:(MFFullScreenVideoPlayerController * _Nonnull)controller shouldVideoPlaybackOnPresentation:(GDMediaPlayer * _Nonnull)mediaPlayer SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate the controller will playback the video. If delegate returns <code>false</code>, then controller will not start the video player directly but will assume the delegate has done it. The UI will be udpated to playback state.
- (BOOL)fullScreenVideoPlayerController:(MFFullScreenVideoPlayerController * _Nonnull)controller willPlayback:(GDMediaPlayer * _Nonnull)mediaPlayer SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate the controller will pause the video. If delegate returns <code>false</code>, then controller will not pause the video player directly but will assume the delegate has done it. The UI will be udpated to pause state.
- (BOOL)fullScreenVideoPlayerController:(MFFullScreenVideoPlayerController * _Nonnull)controller willPause:(GDMediaPlayer * _Nonnull)mediaPlayer SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate playback has ended.
- (void)fullScreenVideoPlayerController:(MFFullScreenVideoPlayerController * _Nonnull)controller playbackHasEnded:(GDMediaPlayer * _Nonnull)mediaPlayer;
/// Notifies the delegate user request seek to time in player and request authorization
- (BOOL)fullScreenVideoPlayerController:(MFFullScreenVideoPlayerController * _Nonnull)controller shouldAllowUserToSkipForPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer SWIFT_WARN_UNUSED_RESULT;
@optional
/// The image to use for the Close button. If not provided the default close button will be used.
- (UIImage * _Nullable)fullScreenVideoPlayerControllerImageForCloseButton:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// The image to use for the Play button. If not provided the default close button will be used.
- (UIImage * _Nullable)fullScreenVideoPlayerControllerImageForPlayButton:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// The image to use for the Pause button. If not provided the default close button will be used.
- (UIImage * _Nullable)fullScreenVideoPlayerControllerImageForPauseButton:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// The title string for the more info button. If nil is returned, no info button will be presented.
- (NSString * _Nullable)fullScreenVideoPlayerControllerStringForMoreInfoButton:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// The title string for the video. If nil is returned, no title will be displayed.
- (NSString * _Nullable)fullScreenVideoPlayerControllerTitleString:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// The font to be used for title display.
- (UIFont * _Nullable)fullScreenVideoPlayerControllerFontForTitle:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// The color to be used for title display.
- (UIColor * _Nullable)fullScreenVideoPlayerControllerColorForTitle:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// The kicker string for the video. If nil is returned, no kicker will be displayed.
- (NSString * _Nullable)fullScreenVideoPlayerControllerKickerString:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// The font to be used for kicker display.
- (UIFont * _Nullable)fullScreenVideoPlayerControllerFontForKicker:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// The color to be used for kicker display.
- (UIColor * _Nullable)fullScreenVideoPlayerControllerColorForKicker:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// The color to be used for kicker display.
- (UIColor * _Nullable)fullScreenVideoPlayerControllerColorForTextBackground:(MFFullScreenVideoPlayerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7BuzzSDK14MFGradientView")
@interface MFGradientView : UIView
@property (nonatomic, strong) UIColor * _Nonnull startColor;
@property (nonatomic, strong) UIColor * _Nonnull endColor;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSessionDataTask;

SWIFT_CLASS("_TtC7BuzzSDK17MFImageDownloader")
@interface MFImageDownloader : NSObject
/// Convenience class method to initiate the download of an image using a default configuration shared session. Completion will be called when process finishes either succesfully or not (i.e. with an instance of UIImage or not). The URLSessionDataTask is returned so that process can be cancelled by caller if necessary.
+ (NSURLSessionDataTask * _Nullable)downloadImageTaskForURLString:(NSString * _Nonnull)urlString completion:(void (^ _Nonnull)(UIImage * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience method to access <code>downloadImageTask</code> but only initiating the download and not returning any object.
+ (void)downloadImageForURLString:(NSString * _Nonnull)urlString completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum LogLevel : NSInteger;

/// A utility class to provide custom logging messages to console
SWIFT_CLASS("_TtC7BuzzSDK8MFLogger")
@interface MFLogger : NSObject
/// The current log level to be used when log methods are invoked.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum LogLevel logLevel;)
+ (enum LogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum LogLevel)value;
/// The names of the classes to include in loging, if empty all classes will be logged.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSString *> * _Nonnull classNamesToInclude;)
+ (NSArray<NSString *> * _Nonnull)classNamesToInclude SWIFT_WARN_UNUSED_RESULT;
+ (void)setClassNamesToInclude:(NSArray<NSString *> * _Nonnull)value;
/// Logs a specific <code>message' including</code>class` information on a given level.
+ (void)log:(NSString * _Nonnull)message fromClass:(Class _Nullable)aClass level:(enum LogLevel)level;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The Log level options
typedef SWIFT_ENUM(NSInteger, LogLevel) {
  LogLevelNone = 0,
  LogLevelError = 1,
  LogLevelWarning = 2,
  LogLevelInfo = 3,
  LogLevelDebug = 4,
};


/// Class in charge of providing networking functionality for the app.
SWIFT_CLASS("_TtC7BuzzSDK12MFNetworking")
@interface MFNetworking : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Parser for Video Ads VAST documents
SWIFT_CLASS("_TtC7BuzzSDK21MFVASTParserOperation")
@interface MFVASTParserOperation : NSOperation
- (void)main;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSXMLParser;

@interface MFVASTParserOperation (SWIFT_EXTENSION(BuzzSDK)) <NSXMLParserDelegate>
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCDATA:(NSData * _Nonnull)CDATABlock;
- (void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
@end

@protocol MFVASTPlayerControllerDelegate;
enum MFPlaybackQuartile : NSInteger;
enum MFVASTSoundState : NSInteger;

/// This controller is in charge of managing the VAST Ad life cycle from reqeust to video loading, presentation and reporting.
SWIFT_CLASS("_TtC7BuzzSDK22MFVASTPlayerController")
@interface MFVASTPlayerController : NSObject
- (nonnull instancetype)initWithDelegate:(id <MFVASTPlayerControllerDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
/// \code
/// Instructs the controller to process a VAST Video Ad Request to the given `url`.
/// Will only be processed once, subsequent requests will be ignored.
///
/// \endcode
- (void)processVideoAdFromVASTURL:(NSURL * _Nonnull)url;
/// \code
/// Instructs the controller to process a VAST Video Ad from VAST XML `data`.
/// Will only be processed once, subsequent requests will be ignored.
///
/// \endcode
- (void)processVideoAdFromVASTData:(NSData * _Nonnull)data;
/// Convenience flag to indicate the video Ad has been played completelly
@property (nonatomic, readonly) BOOL completedPlayback;
/// Convenience accesor to the Video Ad clickthrough URL if any
- (NSURL * _Nullable)adClickThroughURL SWIFT_WARN_UNUSED_RESULT;
/// The <code>GDMediaPlayer</code> reaponsible for playing the Video Ad content
@property (nonatomic, readonly, strong) GDMediaPlayer * _Nullable mediaPlayer;
/// Current quartile for the video playing
@property (nonatomic, readonly) enum MFPlaybackQuartile currentQuartile;
/// The video duration for the media player, if available, otherwise 0 *
@property (nonatomic, readonly) NSTimeInterval videoDuration;
/// Will commence the video content loading.
/// Will exit immediatelly if a <code>GDMediaPlayer</code> has already been instantiated for this class instance or if this is called before a valid <code>MFVASTMediaFile</code> has been retrieved.
- (void)startLoadingVideoAdContent;
/// Stop Video Ad Playback if playing
- (void)stop;
/// Starts Video Ad Playback if not done yet. Should only be called on first play of video, for subsequent playback after pause call <code>resume</code> to ensure proper tracking of VAST events
- (void)play;
/// Rewind video ad back to the beginning
- (void)backToBeginning;
/// Resumes Video Ad Playback if not playing. If Video has not been played before then this will invoke <code>play</code>
- (void)resume;
/// Pauses video playback if playing
- (void)pause;
/// Ask the controller to adjust the Volume level of the Meida Player. Controller will track Volume change events if <code>track</code> is <code>true</code>
- (void)adjustVolumeLevel:(float)volumeLevel andTrack:(BOOL)track;
/// Asks the controller to track Mute/Unmute events without checking or adjusting the actual volume of the media player. This is provided so that tracking can be triggered when volume control of the media player is taken care by some other class.
- (void)trackWithSoundStateChange:(enum MFVASTSoundState)newState;
/// Call this method to indicate the controller that the Ad View has been tapped. This will handle clicks and tracking
- (void)tapped;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, MFPlaybackQuartile) {
  MFPlaybackQuartileNone = 0,
  MFPlaybackQuartileFirst = 1,
  MFPlaybackQuartileSecond = 2,
  MFPlaybackQuartileThird = 3,
  MFPlaybackQuartileFourth = 4,
};

/// The posible sound states of the VAST Controller media player.
typedef SWIFT_ENUM(NSInteger, MFVASTSoundState) {
  MFVASTSoundStateMutted = 0,
  MFVASTSoundStateUnmutted = 1,
};


@interface MFVASTPlayerController (SWIFT_EXTENSION(BuzzSDK)) <GDMediaPlayerStatusDelegateProtocol>
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer itemIsReadyToPlayForContentType:(GDMediaPlayerContentType)mediaPlayerContentType;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer failedToLoadMediaForContentType:(GDMediaPlayerContentType)mediaPlayerContentType error:(NSError * _Nonnull)error;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer itemIsNotPlayableForContentType:(GDMediaPlayerContentType)mediaPlayerContentType;
@end


@interface MFVASTPlayerController (SWIFT_EXTENSION(BuzzSDK)) <GDMediaPlayerUIDelegateProtocol>
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer startedPlaybackForContentType:(GDMediaPlayerContentType)mediaPlayerContentType;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer playbackWasPausedForContentType:(GDMediaPlayerContentType)mediaPlayerContentType;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer isReadyForDisplayForContentType:(GDMediaPlayerContentType)mediaPlayerContentType;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer videoHasStalledForContentType:(GDMediaPlayerContentType)mediaPlayerContentType;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer videoCanRestartPlaybackForContentType:(GDMediaPlayerContentType)mediaPlayerContentType wasStalled:(BOOL)wasStalled;
- (void)mediaPlayer:(GDMediaPlayer * _Nonnull)mediaPlayer videoHasReachedEndForContentType:(GDMediaPlayerContentType)mediaPlayerContentType willLoop:(BOOL)willLoop;
@end


SWIFT_PROTOCOL("_TtP7BuzzSDK30MFVASTPlayerControllerDelegate_")
@protocol MFVASTPlayerControllerDelegate
/// Reports when the <code>controller</code> has finished requesting a VAST Ad. If <code>success</code> is <code>false</code>, then <code>error</code> includes the error reason
- (void)vastPlayerController:(MFVASTPlayerController * _Nonnull)controller adRequestCompletedSuccessfully:(BOOL)success error:(NSError * _Nullable)error;
/// Reports when the <code>controller</code> has an error during processing. Either on Ad Request or video playback.
- (void)vastPlayerController:(MFVASTPlayerController * _Nonnull)controller hasFailedWithError:(NSError * _Nonnull)error;
/// Reports when the <code>controller</code> has successfully instantiated a <code>GDMediaPlayer</code> instance and will start the video loading process
- (void)vastPlayerController:(MFVASTPlayerController * _Nonnull)controller willStartLoadingVideoPlayer:(GDMediaPlayer * _Nonnull)player;
/// Reports when the <code>controller</code> has received a user click event and must result on a Click through to the specified <code>url</code>.
- (void)vastPlayerController:(MFVASTPlayerController * _Nonnull)controller followClickThroughWithURL:(NSURL * _Nonnull)url;
/// Reports when the <code>controller</code> has updated the playback time of its associated video Ad player.
- (void)vastPlayerController:(MFVASTPlayerController * _Nonnull)controller didUpdatePlaybackTime:(NSTimeInterval)playbackTime videoDuration:(NSTimeInterval)videoDuration;
/// Reports when the <code>controller</code> video ad is ready for display (infers ready for playback).
- (void)vastPlayerControllerIsReadyForDisplay:(MFVASTPlayerController * _Nonnull)controller;
/// Reports when the <code>controller</code> video ad has started playing.
- (void)vastPlayerControllerStartedPlayback:(MFVASTPlayerController * _Nonnull)controller;
/// Reports when the <code>controller</code> video ad has been paused.
- (void)vastPlayerControllerPausedPlayback:(MFVASTPlayerController * _Nonnull)controller;
/// Reports when the <code>controller</code> has completed playing a video Ad.
- (void)vastPlayerControllerCompletedPlayback:(MFVASTPlayerController * _Nonnull)controller;
/// Reports when the <code>controller</code> has detected that the video ad playback has stalled.
- (void)vastPlayerControllerPlaybackStalled:(MFVASTPlayerController * _Nonnull)controller;
/// Reports when the <code>controller</code> has continued the video ad playback after it was stalled.
- (void)vastPlayerControllerResumePlaybackAfterStalled:(MFVASTPlayerController * _Nonnull)controller;
/// Reports when the <code>controller</code> has tracked impressions.
- (void)vastPlayerControllerHasTrackedImpression:(MFVASTPlayerController * _Nonnull)controller;
@end


/// A basic WK web view controller.
SWIFT_CLASS("_TtC7BuzzSDK19MFWebViewController")
@interface MFWebViewController : UIViewController
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class WKWebView;
@class WKNavigation;

@interface MFWebViewController (SWIFT_EXTENSION(BuzzSDK)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
@end


@interface NSDate (SWIFT_EXTENSION(BuzzSDK))
+ (NSDate * _Nullable)dateFromString:(NSString * _Nonnull)string style:(enum DateFormatterStyle)style SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringWithAPIFormatWithStyle:(enum DateFormatterStyle)style SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringWithGMTTimeHour SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringWithLocalTimeHour SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringWithLocalDayOfTheWeek SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringWithLocalShortDate SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(BuzzSDK))
/// Provide a localized version of the actual String from the default localization files in the main bundle.
@property (nonatomic, readonly, strong) NSString * _Nonnull localized;
/// Provide a localized version of the actual String from the vertical localization files as provided by <code>AppConfiguration.verticalLocalizationFilename()</code> in the bundle of the framework or app.
@property (nonatomic, readonly, strong) NSString * _Nonnull localizedVertical;
@end


@interface UIButton (SWIFT_EXTENSION(BuzzSDK))
- (void)tintButtonImageForState:(UIControlState)state withColor:(UIColor * _Nonnull)tintColor;
@end


@interface UIColor (SWIFT_EXTENSION(BuzzSDK))
- (nonnull instancetype)initWithRed:(NSUInteger)red green:(NSUInteger)green blue:(NSUInteger)blue andAlpha:(NSUInteger)alpha;
- (nonnull instancetype)initWithRGBA:(NSUInteger)RGBA;
+ (UIColor * _Nonnull)withIntRed:(NSUInteger)red green:(NSUInteger)green blue:(NSUInteger)blue alpha:(NSUInteger)alpha SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)withRGBA:(NSUInteger)rgba SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(BuzzSDK))
+ (UIImage * _Nullable)imageWithColor:(UIColor * _Nonnull)color bounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImageView (SWIFT_EXTENSION(BuzzSDK))
- (void)tintImageWithColor:(UIColor * _Nonnull)tintColor;
@end


@interface UIView (SWIFT_EXTENSION(BuzzSDK))
/// Convenience accessor of applyShadow with default values except opacity for ObjC.
- (void)applyShadowWithOpacity:(float)opacity;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
